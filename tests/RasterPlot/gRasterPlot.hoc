//=========================================================================
// gRasterPlot.ses
//
// Raster plot graphics
// check the NEURON Book, page 335
// neurons in the network has to be in a Python list and accessed
// with a reference to a Python object (e.g. py.BC)
//=========================================================================

objref py
py = new PythonObject() /* to access Python objects */

//=========================================================================
// getSpikeList()
//
// Copies the spk_times (hoc Vector) from the the Python lists (cell_list)
// and returns it as a hoc List.
//=========================================================================

obfunc getSpikeList(){local i localobj spk_list, spk_times

    spk_list = new List() /* a List to collect all spikes */
    for i = 0, py.ncells - 1 {
        spk_times = new Vector() /* to collect spk_times from py obj */
        spk_times.from_python( py.cell_list[i].spk_times )
        // print i // verify that the data were copied
        // spk_times.printf()
        spk_list.append( spk_times )
    }
    return spk_list
}

//=========================================================================
// showRasterPlot()
//
// Arguments:
// $o1 is the Graph object that will get the plot
// $o2 hoc List with spk_time vectors (obtained getSpikeList)
// 
// will plot a sequence of | whose xcoor are the times at which cell fires
//=========================================================================
proc showRasterPlot(){ local i localobj spk

    spk = new Vector()

    $o1.erase_all()
    for i = 0, py.ncells - 1 {
        /* Vector.c() creates Vector that has the same number of elements*/
        spk = $o2.object(i).c 
        spk.fill( i+1 )
        spk.mark($o1, $o2.object(i), "|", 3)
    }

}

/* show raster plot */
objref spk_list
spk_list = getSpikeList() 

objref mygraph
mygraph = new Graph(0)
mygraph.view(0, 0, tstop, py.ncells, 4, 295, 339.84, 200)
//run()
showRasterPlot(mygraph, spk_list)


